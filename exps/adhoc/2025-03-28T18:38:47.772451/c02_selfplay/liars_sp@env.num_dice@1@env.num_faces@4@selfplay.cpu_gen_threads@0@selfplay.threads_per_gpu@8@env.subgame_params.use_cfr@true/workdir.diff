diff --git a/csrc/liars_dice/CMakeLists.txt b/csrc/liars_dice/CMakeLists.txt
index 6ff3427..bb8e295 100644
--- a/csrc/liars_dice/CMakeLists.txt
+++ b/csrc/liars_dice/CMakeLists.txt
@@ -1,82 +1,95 @@
 cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
 project(cfr)
-add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)
-
 set(CMAKE_CXX_STANDARD 17)
 
 set(CMAKE_CXX_FLAGS
   "${CMAKE_CXX_FLAGS} -I .. -Wall -mcmodel=medium -march=native -Wextra -Wno-register -fPIC -Wfatal-errors -O3")
 set(CMAKE_CXX_FLAGS
   "${CMAKE_CXX_FLAGS} -g -fno-omit-frame-pointer")
-
-# Build GTest.
-# Prevent overriding the parent project's compiler/linker
-# settings on Windows
 set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
 
-# Add googletest directly to our build. This defines
-# the gtest and gtest_main targets.
 add_subdirectory(${CMAKE_SOURCE_DIR}/../../third_party/googletest third_party/googletest EXCLUDE_FROM_ALL)
+message(当前路径：${CMAKE_SOURCE_DIR})
+# 查找 Python 相关包
+find_package(PythonInterp 3.7 REQUIRED)  # 查找 Python 解释器
+find_package(PythonLibs 3.7 REQUIRED)    # 查找 Python 库
 
-# find packages & third_party
-find_package(PythonInterp 3.7 REQUIRED)
-find_package(PythonLibs 3.7 REQUIRED)
-
-#### TORCH LIB  #####
 if (NOT TARGET torch_library)
+  # 执行 Python 命令获取 PyTorch 安装路径
   execute_process(
     COMMAND python -c "import torch; import os; print(os.path.dirname(torch.__file__), end='')"
     OUTPUT_VARIABLE TorchPath
   )
+  # 将 PyTorch 路径添加到 CMake 搜索路径
   list(APPEND CMAKE_PREFIX_PATH ${TorchPath})
-  # set cuda arch list so that the built binary can be run on both pascal and volta
+  # 设置 CUDA 架构列表，支持 Pascal 和 Volta 架构
   set(TORCH_CUDA_ARCH_LIST "6.0;7.0")
+  # 查找 PyTorch 包
   find_package(Torch REQUIRED)
 endif()
 
+# 创建 liars_dice_lib 静态库
+# 包含多个源文件：liars_dice, subgame_solving, real_net, recursive_solving, stats
 add_library(liars_dice_lib liars_dice subgame_solving real_net recursive_solving stats)
+# 将 liars_dice_lib 链接到 PyTorch
 target_link_libraries(liars_dice_lib torch)
+# 设置 liars_dice_lib 使用 C++17 标准
 set_target_properties(liars_dice_lib PROPERTIES CXX_STANDARD 17)
 
+# 创建 recursive_eval 可执行文件
 add_executable(recursive_eval recursive_eval)
+# 将 recursive_eval 链接到 liars_dice_lib
 target_link_libraries(recursive_eval liars_dice_lib)
 
+# 添加 pybind11 作为子项目
 add_subdirectory(
-  ${CMAKE_CURRENT_SOURCE_DIR}/../../third_party/pybind11 third_party/pybind11
+  ${CMAKE_SOURCE_DIR}/../../third_party/pybind11 third_party/pybind11
 )
 
 add_library(_rela
   rela/types.cc
 )
+# 设置 _rela 的包含目录
 target_include_directories(_rela PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
 target_include_directories(_rela PUBLIC ${PYTHON_INCLUDE_DIRS})
 target_include_directories(_rela PUBLIC $ENV{CONDA_PREFIX}/include)
+# 将 _rela 链接到 PyTorch
 target_link_libraries(_rela torch)
 
-# python lib
 pybind11_add_module(rela rela/pybind.cc)
-target_link_libraries(rela PUBLIC _rela liars_dice_lib)
+
+target_link_libraries(rela 
+    PRIVATE
+    pybind11::module  # 关键：链接 pybind11 目标
+    PUBLIC 
+    _rela 
+    liars_dice_lib
+)
 
 add_executable(gen_benchmark gen_benchmark)
+# 链接必要的库
 target_link_libraries(gen_benchmark liars_dice_lib _rela)
 
-#################
-# Tests
-include(GoogleTest)
-enable_testing()
 
-add_executable(liar_game_test liars_dice_test.cc)
-target_link_libraries(liar_game_test liars_dice_lib gtest_main)
-add_test(NAME liar_game COMMAND liar_game_test)
+# include(GoogleTest)
+# # 启用测试
+# enable_testing()
+
+# add_executable(liar_game_test liars_dice_test.cc)
+# target_link_libraries(liar_game_test liars_dice_lib gtest_main)
+# add_test(NAME liar_game COMMAND liar_game_test)
+
 
-add_executable(liar_tree_test tree_test.cc)
-target_link_libraries(liar_tree_test liars_dice_lib gtest_main)
-add_test(NAME liar_tree COMMAND liar_tree_test)
+# add_executable(liar_tree_test tree_test.cc)
+# target_link_libraries(liar_tree_test liars_dice_lib gtest_main)
+# add_test(NAME liar_tree COMMAND liar_tree_test)
 
-add_executable(liar_recursive_solving_test recursive_solving_test.cc)
-target_link_libraries(liar_recursive_solving_test liars_dice_lib gtest_main)
-add_test(NAME liar_recursive_solving COMMAND liar_recursive_solving_test)
+# # liar_recursive_solving_test
+# add_executable(liar_recursive_solving_test recursive_solving_test.cc)
+# target_link_libraries(liar_recursive_solving_test liars_dice_lib gtest_main)
+# add_test(NAME liar_recursive_solving COMMAND liar_recursive_solving_test)
 
-add_executable(liar_subgame_solving_test subgame_solving_test.cc)
-target_link_libraries(liar_subgame_solving_test liars_dice_lib gtest_main)
-add_test(NAME liar_subgame_solving COMMAND liar_subgame_solving_test)
+# # liar_subgame_solving_test
+# add_executable(liar_subgame_solving_test subgame_solving_test.cc)
+# target_link_libraries(liar_subgame_solving_test liars_dice_lib gtest_main)
+# add_test(NAME liar_subgame_solving COMMAND liar_subgame_solving_test)
diff --git a/csrc/liars_dice/gen_benchmark.cc b/csrc/liars_dice/gen_benchmark.cc
deleted file mode 100644
index 032514c..0000000
--- a/csrc/liars_dice/gen_benchmark.cc
+++ /dev/null
@@ -1,154 +0,0 @@
-// Copyright (c) Facebook, Inc. and its affiliates.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-#include <algorithm>
-#include <iostream>
-#include <map>
-#include <string>
-
-#include <torch/script.h>
-
-#include "rela/context.h"
-#include "rela/data_loop.h"
-#include "rela/model_locker.h"
-#include "rela/prioritized_replay.h"
-
-#include "real_net.h"
-#include "recursive_solving.h"
-#include "subgame_solving.h"
-#include "util.h"
-
-using namespace liars_dice;
-using namespace rela;
-
-int get_depth(const Tree& tree, int root = 0) {
-  int depth = 1;
-  for (auto child : ChildrenIt(tree[root])) {
-    depth = std::max(depth, 1 + get_depth(tree, child));
-  }
-  return depth;
-}
-
-struct Timer {
-  std::chrono::time_point<std::chrono::system_clock> start =
-      std::chrono::system_clock::now();
-
-  double tick() {
-    const auto end = std::chrono::system_clock::now();
-    std::chrono::duration<double> diff = end - start;
-    return diff.count();
-  }
-};
-
-int main(int argc, char* argv[]) {
-  int num_dice = 1;
-  int num_faces = 4;
-  int fp_iters = 1024;
-  int mdp_depth = 2;
-  int num_threads = 10;
-  int per_gpu = 1;
-  int num_cycles = 6;
-  std::string device = "cuda:1";
-  std::string net_path;
-  {
-    for (int i = 1; i < argc; i++) {
-      std::string arg = argv[i];
-      if (arg == "--num_dice") {
-        assert(i + 1 < argc);
-        num_dice = std::stoi(argv[++i]);
-      } else if (arg == "--num_faces") {
-        assert(i + 1 < argc);
-        num_faces = std::stoi(argv[++i]);
-      } else if (arg == "--fp_iters") {
-        assert(i + 1 < argc);
-        fp_iters = std::stoi(argv[++i]);
-      } else if (arg == "--mdp_depth") {
-        assert(i + 1 < argc);
-        mdp_depth = std::stoi(argv[++i]);
-      } else if (arg == "--num_threads") {
-        assert(i + 1 < argc);
-        num_threads = std::stoi(argv[++i]);
-      } else if (arg == "--per_gpu") {
-        assert(i + 1 < argc);
-        per_gpu = std::stoi(argv[++i]);
-      } else if (arg == "--num_cycles") {
-        assert(i + 1 < argc);
-        num_cycles = std::stoi(argv[++i]);
-      } else if (arg == "--device") {
-        assert(i + 1 < argc);
-        device = argv[++i];
-      } else if (arg == "--net") {
-        assert(i + 1 < argc);
-        net_path = argv[++i];
-      } else {
-        std::cerr << "Unknown flag: " << arg << "\n";
-        return -1;
-      }
-    }
-  }
-  assert(num_dice != -1);
-  assert(num_faces != -1);
-  assert(mdp_depth != -1);
-
-  const Game game(num_dice, num_faces);
-  assert(mdp_depth > 0);
-  assert(!net_path.empty());
-  std::cout << "num_dice=" << num_dice << " num_faces=" << num_faces << "\n";
-  {
-    const auto full_tree = unroll_tree(game);
-    std::cout << "Tree of depth " << get_depth(full_tree) << " has "
-              << full_tree.size() << " nodes\n";
-  }
-
-  std::vector<TorchJitModel> models;
-  for (int i = 0; i < per_gpu; ++i) {
-    auto module = torch::jit::load(net_path);
-    module.eval();
-    module.to(device);
-    models.push_back(module);
-  }
-  std::vector<TorchJitModel*> model_ptrs;
-  for (int i = 0; i < per_gpu; ++i) {
-    model_ptrs.push_back(&models[i]);
-  }
-  auto locker = std::make_shared<ModelLocker>(model_ptrs, device);
-  auto replay = std::make_shared<ValuePrioritizedReplay>(1 << 20, 1000, 1.0,
-                                                         0.4, 3, false, false);
-  auto context = std::make_shared<Context>();
-
-  RecursiveSolvingParams cfg;
-  cfg.num_dice = num_dice;
-  cfg.num_faces = num_faces;
-  cfg.subgame_params.num_iters = fp_iters;
-  cfg.subgame_params.linear_update = true;
-  cfg.subgame_params.optimistic = false;
-  cfg.subgame_params.max_depth = mdp_depth;
-  for (int i = 0; i < num_threads; ++i) {
-    const int seed = i;
-    auto connector = std::make_shared<CVNetBufferConnector>(locker, replay);
-    std::shared_ptr<ThreadLoop> loop =
-        std::make_shared<DataThreadLoop>(std::move(connector), cfg, seed);
-    context->pushThreadLoop(loop);
-  }
-  std::cout << "Starting the context" << std::endl;
-  context->start();
-  Timer t;
-  for (int i = 0; i < num_cycles; ++i) {
-    std::this_thread::sleep_for(std::chrono::seconds(10));
-    double secs = t.tick();
-    auto added = replay->numAdd();
-    std::cout << "time=" << secs << " "
-              << "items=" << added << " per_second=" << added / secs << "\n";
-  }
-}
\ No newline at end of file
diff --git a/third_party/pybind11 b/third_party/pybind11
--- a/third_party/pybind11
+++ b/third_party/pybind11
@@ -1 +1 @@
-Subproject commit a1b71df137e015d44f7e31f7b6d4807253fb7871
+Subproject commit a1b71df137e015d44f7e31f7b6d4807253fb7871-dirty
